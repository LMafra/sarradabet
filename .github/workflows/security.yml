name: Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  # Dependency vulnerability scan
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level moderate --json > audit-results.json || true
          npm audit --audit-level moderate

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: audit-results.json
          retention-days: 30

  # Code scanning with CodeQL
  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # License compliance check
  license-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check licenses
        run: |
          npx license-checker --summary
          npx license-checker --json > license-report.json || true

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json
          retention-days: 30

  # Security headers and configuration check
  security-config:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files..."
          if [ -f ".env" ]; then
            echo "⚠️ Warning: .env file found in repository"
          fi
          if [ -f "config/secrets.json" ]; then
            echo "⚠️ Warning: secrets.json file found in repository"
          fi
          
          # Check for hardcoded secrets patterns
          if grep -r "password.*=" --include="*.ts" --include="*.js" --include="*.json" . | grep -v "test" | grep -v "example"; then
            echo "⚠️ Warning: Potential hardcoded passwords found"
          fi
          
          if grep -r "api[_-]?key.*=" --include="*.ts" --include="*.js" --include="*.json" . | grep -v "test" | grep -v "example"; then
            echo "⚠️ Warning: Potential hardcoded API keys found"
          fi

      - name: Check package.json for security issues
        run: |
          echo "Checking package.json for security issues..."
          
          # Check for packages with known vulnerabilities
          if npm audit --audit-level high --json | jq -e '.vulnerabilities | length > 0' > /dev/null; then
            echo "❌ High severity vulnerabilities found"
            exit 1
          else
            echo "✅ No high severity vulnerabilities found"
          fi

  # Docker security scan (if Dockerfile exists)
  docker-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Check for Dockerfile
        id: check-dockerfile
        run: |
          if find . -name "Dockerfile" -type f | grep -q .; then
            echo "dockerfile-exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Trivy vulnerability scanner
        if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: steps.check-dockerfile.outputs.dockerfile-exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Summary
  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, license-check, security-config, docker-scan]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Config | ${{ needs.security-config.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Scan | ${{ needs.docker-scan.result == 'success' && '✅ Passed' || needs.docker-scan.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
