name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  NODE_VERSION: '20'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "This is the first release"
            CHANGELOG="## What's New\n\nThis is the first release of Sarradabet!"
          else
            echo "Previous tag: $PREVIOUS_TAG"
            # Generate changelog from commits
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | head -20)
            if [ -z "$CHANGELOG" ]; then
              CHANGELOG="## What's New\n\n- Bug fixes and improvements"
            else
              CHANGELOG="## What's New\n\n$CHANGELOG"
            fi
          fi
          
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name || inputs.version }}
          release_name: Release ${{ github.ref_name || inputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name || inputs.version, 'alpha') || contains(github.ref_name || inputs.version, 'beta') || contains(github.ref_name || inputs.version, 'rc') }}

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [api, web]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        if: matrix.app == 'api'
        run: npm run prisma:generate
        working-directory: apps/api

      - name: Build application
        run: npm run build
        working-directory: apps/${{ matrix.app }}

      - name: Create archive
        run: |
          cd apps/${{ matrix.app }}
          tar -czf ${{ matrix.app }}-${{ github.ref_name || inputs.version }}.tar.gz dist/
          cd ../..
          tar -czf ${{ matrix.app }}-source-${{ github.ref_name || inputs.version }}.tar.gz apps/${{ matrix.app }}/src/ apps/${{ matrix.app }}/package.json apps/${{ matrix.app }}/tsconfig.json

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.app }}-${{ github.ref_name || inputs.version }}.tar.gz
          asset_name: ${{ matrix.app }}-${{ github.ref_name || inputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Source Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.app }}-source-${{ github.ref_name || inputs.version }}.tar.gz
          asset_name: ${{ matrix.app }}-source-${{ github.ref_name || inputs.version }}.tar.gz
          asset_content_type: application/gzip

  notify:
    needs: [create-release, build-and-upload]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Success
        if: needs.create-release.result == 'success' && needs.build-and-upload.result == 'success'
        run: |
          echo "‚úÖ Release ${{ github.ref_name || inputs.version }} created successfully!"
          echo "üì¶ Assets uploaded to GitHub Releases"
          echo "üîó View release: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name || inputs.version }}"

      - name: Notify Failure
        if: needs.create-release.result == 'failure' || needs.build-and-upload.result == 'failure'
        run: |
          echo "‚ùå Release ${{ github.ref_name || inputs.version }} failed!"
          echo "Please check the logs for more details."
