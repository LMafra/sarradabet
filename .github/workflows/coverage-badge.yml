name: Coverage Badge

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

env:
  NODE_VERSION: '20'

jobs:
  coverage:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: sarradabet_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client (API)
        run: npm run prisma:generate
        working-directory: apps/api

      - name: Prepare API database
        run: |
          npm run prisma:migrate:deploy
          npm run db:seed:simple
        working-directory: apps/api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sarradabet_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/sarradabet_test

      - name: Run API tests with coverage
        run: npm run test:api:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/sarradabet_test
          DIRECT_URL: postgresql://postgres:postgres@localhost:5432/sarradabet_test
          NODE_ENV: test

      - name: Run Web tests with coverage
        run: npm run test:web:coverage

      - name: Generate API coverage badge
        run: |
          # Extract coverage percentage from lcov.info
          API_COVERAGE=$(grep -o '^LF:[0-9]*' apps/api/coverage/lcov.info | head -1 | cut -d: -f2)
          API_HIT=$(grep -o '^LH:[0-9]*' apps/api/coverage/lcov.info | head -1 | cut -d: -f2)
          
          if [ -n "$API_COVERAGE" ] && [ -n "$API_HIT" ] && [ "$API_COVERAGE" -gt 0 ]; then
            API_PERCENTAGE=$((API_HIT * 100 / API_COVERAGE))
          else
            API_PERCENTAGE=0
          fi
          
          echo "API_COVERAGE_PERCENTAGE=$API_PERCENTAGE" >> $GITHUB_ENV
          echo "API Coverage: $API_PERCENTAGE%"

      - name: Generate Web coverage badge
        run: |
          # Extract coverage percentage from V8 coverage format
          if [ -f "apps/web/coverage/coverage-final.json" ]; then
            WEB_PERCENTAGE=$(node -e "
              const fs = require('fs');
              try {
                const coverage = JSON.parse(fs.readFileSync('apps/web/coverage/coverage-final.json', 'utf8'));
                let totalLines = 0;
                let coveredLines = 0;
                
                Object.values(coverage).forEach(file => {
                  if (file.s) {
                    // V8 format uses 's' for statement coverage
                    Object.values(file.s).forEach(line => {
                      totalLines++;
                      if (line > 0) coveredLines++;
                    });
                  }
                });
                
                const percentage = totalLines > 0 ? Math.round((coveredLines / totalLines) * 100) : 0;
                console.log(percentage);
              } catch (error) {
                console.log(0);
              }
            ")
          else
            # Try to extract from HTML report as fallback
            if [ -f "apps/web/coverage/index.html" ]; then
              WEB_PERCENTAGE=$(grep -o 'Statements.*[0-9]*%' apps/web/coverage/index.html | grep -o '[0-9]*%' | head -1 | sed 's/%//' || echo "0")
            else
              WEB_PERCENTAGE=0
            fi
          fi
          
          echo "WEB_COVERAGE_PERCENTAGE=$WEB_PERCENTAGE" >> $GITHUB_ENV
          echo "Web Coverage: $WEB_PERCENTAGE%"

      - name: Generate combined coverage badge
        run: |
          # Calculate combined coverage
          COMBINED_PERCENTAGE=$(( (API_COVERAGE_PERCENTAGE + WEB_COVERAGE_PERCENTAGE) / 2 ))
          echo "COMBINED_COVERAGE_PERCENTAGE=$COMBINED_PERCENTAGE" >> $GITHUB_ENV
          echo "Combined Coverage: $COMBINED_PERCENTAGE%"

      - name: Generate coverage badges
        run: |
          # Create badges directory
          mkdir -p badges
          
          # Function to generate badge SVG
          generate_badge() {
            local label="$1"
            local percentage="$2"
            local color="red"
            
            if [ "$percentage" -ge 90 ]; then
              color="brightgreen"
            elif [ "$percentage" -ge 80 ]; then
              color="green"
            elif [ "$percentage" -ge 70 ]; then
              color="yellowgreen"
            elif [ "$percentage" -ge 60 ]; then
              color="yellow"
            elif [ "$percentage" -ge 50 ]; then
              color="orange"
            fi
            
            echo "Generating badge for $label: $percentage% ($color)"
            
            # Generate SVG badge
            cat > "badges/${label,,}-coverage.svg" << EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="99" height="20">
            <linearGradient id="b" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <mask id="a">
              <rect width="99" height="20" rx="3" fill="#fff"/>
            </mask>
            <g mask="url(#a)">
              <path fill="#555" d="M0 0h61v20H0z"/>
              <path fill="#$color" d="M61 0h38v20H61z"/>
              <path fill="url(#b)" d="M0 0h99v20H0z"/>
            </g>
            <g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11">
              <text x="30.5" y="15" fill="#010101" fill-opacity=".3">$label</text>
              <text x="30.5" y="14">$label</text>
              <text x="80" y="15" fill="#010101" fill-opacity=".3">$percentage%</text>
              <text x="80" y="14">$percentage%</text>
            </g>
          </svg>
          EOF
          }
          
          # Generate badges
          generate_badge "API" "$API_COVERAGE_PERCENTAGE"
          generate_badge "Web" "$WEB_COVERAGE_PERCENTAGE"
          generate_badge "Combined" "$COMBINED_COVERAGE_PERCENTAGE"

      - name: Commit coverage badges
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if badges directory exists and has files
          if [ -d "badges" ] && [ "$(ls -A badges)" ]; then
            git add badges/
            git commit -m "Update coverage badges [skip ci]" || exit 0
            
            # Handle detached HEAD state for pull requests
            if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
              # For PRs, we can't push directly, so we'll just create the badges locally
              echo "Badges created successfully for PR. They will be available after merge."
            else
              # For pushes to main/develop, we can push normally
              git push
            fi
          fi

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            apps/api/coverage/
            apps/web/coverage/
          retention-days: 30

      - name: Upload coverage badges
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badges
          path: badges/
          retention-days: 30
